// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLBaseMemory : IEquatable<GLBaseMemory> {

		private IntPtr _mem;
		public Gst.Memory Mem {
			get {
				return _mem == IntPtr.Zero ? null : (Gst.Memory) GLib.Opaque.GetOpaque (_mem, typeof (Gst.Memory), false);
			}
			set {
				_mem = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _context;
		public Gst.GL.GLContext Context {
			get {
				return GLib.Object.GetObject(_context) as Gst.GL.GLContext;
			}
			set {
				_context = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr __lock;
		public Gst.MapFlags MapFlags;
		public int MapCount;
		public int GlMapCount;
		private IntPtr _data;
		private IntPtr _query;

		public Gst.GL.GLQuery query {
			get { return Gst.GL.GLQuery.New (_query); }
		}
		private UIntPtr alloc_size;
		private IntPtr _alloc_data;
		private GLib.DestroyNotify notify;
		private IntPtr _user_data;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLBaseMemory Zero = new Gst.GL.GLBaseMemory ();

		public static Gst.GL.GLBaseMemory New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLBaseMemory.Zero;
			return (Gst.GL.GLBaseMemory) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLBaseMemory));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_base_memory_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_base_memory_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_base_memory_alloc_data(IntPtr raw);

		public bool AllocData() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			bool raw_ret = gst_gl_base_memory_alloc_data(this_as_native);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_base_memory_init(IntPtr raw, IntPtr allocator, IntPtr parent, IntPtr context, IntPtr parms, UIntPtr size, IntPtr user_data, GLib.DestroyNotify notify);

		public void Init(Gst.Allocator allocator, Gst.Memory parent, Gst.GL.GLContext context, Gst.AllocationParams parms, ulong size, IntPtr user_data, GLib.DestroyNotify notify) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_parms = GLib.Marshaller.StructureToPtrAlloc (parms);
			gst_gl_base_memory_init(this_as_native, allocator == null ? IntPtr.Zero : allocator.Handle, parent == null ? IntPtr.Zero : parent.Handle, context == null ? IntPtr.Zero : context.Handle, native_parms, new UIntPtr (size), user_data, notify);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			Marshal.FreeHGlobal (native_parms);
		}

		public void Init(Gst.Allocator allocator, Gst.GL.GLContext context, ulong size) {
			Init (allocator, null, context, Gst.AllocationParams.Zero, size, IntPtr.Zero, null);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_base_memory_memcpy(IntPtr raw, IntPtr dest, IntPtr offset, IntPtr size);

		public bool Memcpy(Gst.GL.GLBaseMemory dest, long offset, long size) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_dest = GLib.Marshaller.StructureToPtrAlloc (dest);
			bool raw_ret = gst_gl_base_memory_memcpy(this_as_native, native_dest, new IntPtr (offset), new IntPtr (size));
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			Marshal.FreeHGlobal (native_dest);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_base_memory_alloc(IntPtr allocator, IntPtr parms);

		public static Gst.GL.GLBaseMemory Alloc(Gst.GL.GLBaseMemoryAllocator allocator, Gst.GL.GLAllocationParams parms) {
			IntPtr native_parms = GLib.Marshaller.StructureToPtrAlloc (parms);
			IntPtr raw_ret = gst_gl_base_memory_alloc(allocator == null ? IntPtr.Zero : allocator.Handle, native_parms);
			Gst.GL.GLBaseMemory ret = Gst.GL.GLBaseMemory.New (raw_ret);
			Marshal.FreeHGlobal (native_parms);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_base_memory_init_once();

		public static void InitOnce() {
			gst_gl_base_memory_init_once();
		}

		static void ReadNative (IntPtr native, ref Gst.GL.GLBaseMemory target)
		{
			target = New (native);
		}

		public bool Equals (GLBaseMemory other)
		{
			return true && Mem.Equals (other.Mem) && Context.Equals (other.Context) && __lock.Equals (other.__lock) && MapFlags.Equals (other.MapFlags) && MapCount.Equals (other.MapCount) && GlMapCount.Equals (other.GlMapCount) && _data.Equals (other._data) && query.Equals (other.query) && alloc_size.Equals (other.alloc_size) && _alloc_data.Equals (other._alloc_data) && notify.Equals (other.notify) && _user_data.Equals (other._user_data);
		}

		public override bool Equals (object other)
		{
			return other is GLBaseMemory && Equals ((GLBaseMemory) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Mem.GetHashCode () ^ Context.GetHashCode () ^ __lock.GetHashCode () ^ MapFlags.GetHashCode () ^ MapCount.GetHashCode () ^ GlMapCount.GetHashCode () ^ _data.GetHashCode () ^ query.GetHashCode () ^ alloc_size.GetHashCode () ^ _alloc_data.GetHashCode () ^ notify.GetHashCode () ^ _user_data.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gst.GL.GLBaseMemory boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gst.GL.GLBaseMemory.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gst.GL.GLBaseMemory (GLib.Value val)
		{
			return (Gst.GL.GLBaseMemory) val.Val;
		}
#endregion
	}
}
