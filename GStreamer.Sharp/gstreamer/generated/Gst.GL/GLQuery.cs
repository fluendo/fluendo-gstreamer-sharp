// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLQuery : IEquatable<GLQuery> {

		private IntPtr _context;
		private uint query_type;
		private uint query_id;
		private bool supported;
		private bool start_called;
		private IntPtr _debug;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLQuery Zero = new Gst.GL.GLQuery ();

		public static Gst.GL.GLQuery New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLQuery.Zero;
			return (Gst.GL.GLQuery) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLQuery));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_query_counter(IntPtr raw);

		public void Counter() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_query_counter(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_query_end(IntPtr raw);

		public void End() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_query_end(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_query_free(IntPtr raw);

		public void Free() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_query_free(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_query_init(IntPtr raw, IntPtr context, int query_type);

		public void Init(Gst.GL.GLContext context, Gst.GL.GLQueryType query_type) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_query_init(this_as_native, context == null ? IntPtr.Zero : context.Handle, (int) query_type);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong gst_gl_query_result(IntPtr raw);

		public ulong Result() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			ulong raw_ret = gst_gl_query_result(this_as_native);
			ulong ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_query_start(IntPtr raw);

		public void Start() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_query_start(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_query_unset(IntPtr raw);

		public void Unset() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_query_unset(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_query_local_gl_context(IntPtr element, int direction, ref IntPtr context_ptr);

		public static bool LocalGlContext(Gst.Element element, Gst.PadDirection direction, ref Gst.GL.GLContext context_ptr) {
			IntPtr native_context_ptr = (IntPtr) context_ptr;
			bool raw_ret = gst_gl_query_local_gl_context(element == null ? IntPtr.Zero : element.Handle, (int) direction, ref native_context_ptr);
			bool ret = raw_ret;
			context_ptr = GLib.Object.GetObject(native_context_ptr, true) as Gst.GL.GLContext;
			return ret;
		}

		static void ReadNative (IntPtr native, ref Gst.GL.GLQuery target)
		{
			target = New (native);
		}

		public bool Equals (GLQuery other)
		{
			return true && _context.Equals (other._context) && query_type.Equals (other.query_type) && query_id.Equals (other.query_id) && supported.Equals (other.supported) && start_called.Equals (other.start_called) && _debug.Equals (other._debug);
		}

		public override bool Equals (object other)
		{
			return other is GLQuery && Equals ((GLQuery) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _context.GetHashCode () ^ query_type.GetHashCode () ^ query_id.GetHashCode () ^ supported.GetHashCode () ^ start_called.GetHashCode () ^ _debug.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
