// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLSLStage : Gst.Object {

		public GLSLStage (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_stage_new(IntPtr context, uint type);

		public GLSLStage (Gst.GL.GLContext context, uint type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLSLStage)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_glsl_stage_new(context == null ? IntPtr.Zero : context.Handle, type);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_stage_new_default_fragment(IntPtr context);

		public GLSLStage (Gst.GL.GLContext context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLSLStage)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_glsl_stage_new_default_fragment(context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_stage_new_default_vertex(IntPtr context);

		public static GLSLStage NewDefaultVertex(Gst.GL.GLContext context)
		{
			GLSLStage result = new GLSLStage (gst_glsl_stage_new_default_vertex(context == null ? IntPtr.Zero : context.Handle));
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_stage_new_with_string(IntPtr context, uint type, int version, int profile, IntPtr str);

		public GLSLStage (Gst.GL.GLContext context, uint type, Gst.GL.GLSLVersion version, Gst.GL.GLSLProfile profile, string str) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLSLStage)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			Raw = gst_glsl_stage_new_with_string(context == null ? IntPtr.Zero : context.Handle, type, (int) version, (int) profile, native_str);
			GLib.Marshaller.Free (native_str);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_stage_new_with_strings(IntPtr context, uint type, int version, int profile, int n_strings, IntPtr[] str);

		public GLSLStage (Gst.GL.GLContext context, uint type, Gst.GL.GLSLVersion version, Gst.GL.GLSLProfile profile, string[] str) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLSLStage)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			int cnt_str = str == null ? 0 : str.Length;
			IntPtr[] native_str = new IntPtr [cnt_str];
			for (int i = 0; i < cnt_str; i++)
				native_str [i] = GLib.Marshaller.StringToPtrGStrdup (str[i]);
			Raw = gst_glsl_stage_new_with_strings(context == null ? IntPtr.Zero : context.Handle, type, (int) version, (int) profile, (str == null ? 0 : str.Length), native_str);
			for (int i = 0; i < native_str.Length; i++) {
				str [i] = GLib.Marshaller.Utf8PtrToString (native_str[i]);
				GLib.Marshaller.Free (native_str[i]);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_padding"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_stage_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_glsl_stage_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gst_glsl_stage_compile(IntPtr raw, out IntPtr error);

		public unsafe bool Compile() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gst_glsl_stage_compile(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_glsl_stage_get_handle(IntPtr raw);

		public uint GetHandle() {
			uint raw_ret = gst_glsl_stage_get_handle(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_glsl_stage_get_profile(IntPtr raw);

		public Gst.GL.GLSLProfile Profile { 
			get {
				int raw_ret = gst_glsl_stage_get_profile(Handle);
				Gst.GL.GLSLProfile ret = (Gst.GL.GLSLProfile) raw_ret;
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_glsl_stage_get_shader_type(IntPtr raw);

		public uint ShaderType { 
			get {
				uint raw_ret = gst_glsl_stage_get_shader_type(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_glsl_stage_get_version(IntPtr raw);

		public Gst.GL.GLSLVersion Version { 
			get {
				int raw_ret = gst_glsl_stage_get_version(Handle);
				Gst.GL.GLSLVersion ret = (Gst.GL.GLSLVersion) raw_ret;
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_glsl_stage_set_strings(IntPtr raw, int version, int profile, int n_strings, IntPtr[] str);

		public bool SetStrings(Gst.GL.GLSLVersion version, Gst.GL.GLSLProfile profile, string[] str) {
			int cnt_str = str == null ? 0 : str.Length;
			IntPtr[] native_str = new IntPtr [cnt_str];
			for (int i = 0; i < cnt_str; i++)
				native_str [i] = GLib.Marshaller.StringToPtrGStrdup (str[i]);
			bool raw_ret = gst_glsl_stage_set_strings(Handle, (int) version, (int) profile, (str == null ? 0 : str.Length), native_str);
			bool ret = raw_ret;
			for (int i = 0; i < native_str.Length; i++) {
				str [i] = GLib.Marshaller.Utf8PtrToString (native_str[i]);
				GLib.Marshaller.Free (native_str[i]);
			}
			return ret;
		}


		static GLSLStage ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("context"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, null
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "context"
							, "_padding"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
