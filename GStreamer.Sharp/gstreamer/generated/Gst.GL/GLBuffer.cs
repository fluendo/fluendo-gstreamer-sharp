// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLBuffer : IEquatable<GLBuffer> {

		public Gst.GL.GLBaseMemory Mem;
		public uint Id;
		public uint Target;
		public uint UsageHints;

		public static Gst.GL.GLBuffer Zero = new Gst.GL.GLBuffer ();

		public static Gst.GL.GLBuffer New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLBuffer.Zero;
			return (Gst.GL.GLBuffer) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLBuffer));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_buffer_init_once();

		public static void InitOnce() {
			gst_gl_buffer_init_once();
		}

		public bool Equals (GLBuffer other)
		{
			return true && Mem.Equals (other.Mem) && Id.Equals (other.Id) && Target.Equals (other.Target) && UsageHints.Equals (other.UsageHints);
		}

		public override bool Equals (object other)
		{
			return other is GLBuffer && Equals ((GLBuffer) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Mem.GetHashCode () ^ Id.GetHashCode () ^ Target.GetHashCode () ^ UsageHints.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
