// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLViewConvert : Gst.Object {

		public GLViewConvert (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_view_convert_new();

		public GLViewConvert () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLViewConvert)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gst_gl_view_convert_new();
		}

		[GLib.Property ("downmix-mode")]
		public Gst.GL.GLStereoDownmix DownmixMode {
			get {
				GLib.Value val = GetProperty ("downmix-mode");
				Gst.GL.GLStereoDownmix ret = (Gst.GL.GLStereoDownmix) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("downmix-mode", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("input-flags-override")]
		public Gst.Video.VideoMultiviewFlags InputFlagsOverride {
			get {
				GLib.Value val = GetProperty ("input-flags-override");
				Gst.Video.VideoMultiviewFlags ret = (Gst.Video.VideoMultiviewFlags) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("input-flags-override", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("input-mode-override")]
		public Gst.Video.VideoMultiviewMode InputModeOverride {
			get {
				GLib.Value val = GetProperty ("input-mode-override");
				Gst.Video.VideoMultiviewMode ret = (Gst.Video.VideoMultiviewMode) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("input-mode-override", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("output-flags-override")]
		public Gst.Video.VideoMultiviewFlags OutputFlagsOverride {
			get {
				GLib.Value val = GetProperty ("output-flags-override");
				Gst.Video.VideoMultiviewFlags ret = (Gst.Video.VideoMultiviewFlags) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("output-flags-override", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("output-mode-override")]
		public Gst.Video.VideoMultiviewMode OutputModeOverride {
			get {
				GLib.Value val = GetProperty ("output-mode-override");
				Gst.Video.VideoMultiviewMode ret = (Gst.Video.VideoMultiviewMode) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("output-mode-override", val);
				val.Dispose ();
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_view_convert_set_context(IntPtr raw, IntPtr context);

		public Gst.GL.GLContext Context {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("context"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.GL.GLContext;
				}
			}
			set  {
				gst_gl_view_convert_set_context(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		public Gst.GL.GLShader Shader {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("shader"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.GL.GLShader;
				}
			}
		}

		public Gst.Video.VideoMultiviewMode InputModeOverrideField {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("input_mode_override"));
					return (Gst.Video.VideoMultiviewMode) (*raw_ptr);
				}
			}
		}

		public Gst.Video.VideoMultiviewFlags InputFlagsOverrideField {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("input_flags_override"));
					return (Gst.Video.VideoMultiviewFlags) (*raw_ptr);
				}
			}
		}

		public Gst.Video.VideoMultiviewMode OutputModeOverrideField {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("output_mode_override"));
					return (Gst.Video.VideoMultiviewMode) (*raw_ptr);
				}
			}
		}

		public Gst.Video.VideoMultiviewFlags OutputFlagsOverrideField {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("output_flags_override"));
					return (Gst.Video.VideoMultiviewFlags) (*raw_ptr);
				}
			}
		}

		public Gst.GL.GLStereoDownmix DownmixModeField {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("downmix_mode"));
					return (Gst.GL.GLStereoDownmix) (*raw_ptr);
				}
			}
		}

		public Gst.Video.VideoInfo InInfo {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("in_info"));
					return (*raw_ptr) == IntPtr.Zero ? null : (Gst.Video.VideoInfo) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gst.Video.VideoInfo), false);
				}
			}
		}

		public Gst.Video.VideoInfo OutInfo {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("out_info"));
					return (*raw_ptr) == IntPtr.Zero ? null : (Gst.Video.VideoInfo) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gst.Video.VideoInfo), false);
				}
			}
		}

		public Gst.GL.GLTextureTarget FromTextureTarget {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("from_texture_target"));
					return (Gst.GL.GLTextureTarget) (*raw_ptr);
				}
			}
		}

		public Gst.GL.GLTextureTarget ToTextureTarget {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("to_texture_target"));
					return (Gst.GL.GLTextureTarget) (*raw_ptr);
				}
			}
		}

		public bool CapsPassthrough {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + abi_info.GetFieldOffset("caps_passthrough"));
					return (*raw_ptr);
				}
			}
		}

		public bool Initted {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + abi_info.GetFieldOffset("initted"));
					return (*raw_ptr);
				}
			}
		}

		public bool Reconfigure {
			get {
				unsafe {
					bool* raw_ptr = (bool*)(((byte*)Handle) + abi_info.GetFieldOffset("reconfigure"));
					return (*raw_ptr);
				}
			}
		}

		public Gst.GL.GLFramebuffer Fbo {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("fbo"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.GL.GLFramebuffer;
				}
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_padding"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_view_convert_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_view_convert_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_view_convert_fixate_caps(IntPtr raw, int direction, IntPtr caps, IntPtr othercaps);

		public Gst.Caps FixateCaps(Gst.PadDirection direction, Gst.Caps caps, Gst.Caps othercaps) {
			othercaps.Owned = false;
			IntPtr raw_ret = gst_gl_view_convert_fixate_caps(Handle, (int) direction, caps == null ? IntPtr.Zero : caps.Handle, othercaps == null ? IntPtr.Zero : othercaps.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_view_convert_get_output(IntPtr raw, out IntPtr outbuf_ptr);

		public Gst.FlowReturn GetOutput(out Gst.Buffer outbuf_ptr) {
			IntPtr native_outbuf_ptr;
			int raw_ret = gst_gl_view_convert_get_output(Handle, out native_outbuf_ptr);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			outbuf_ptr = native_outbuf_ptr == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (native_outbuf_ptr, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_view_convert_perform(IntPtr raw, IntPtr inbuf);

		public Gst.Buffer Perform(Gst.Buffer inbuf) {
			IntPtr raw_ret = gst_gl_view_convert_perform(Handle, inbuf == null ? IntPtr.Zero : inbuf.Handle);
			Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_view_convert_reset(IntPtr raw);

		public void Reset() {
			gst_gl_view_convert_reset(Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_view_convert_set_caps(IntPtr raw, IntPtr in_caps, IntPtr out_caps);

		public bool SetCaps(Gst.Caps in_caps, Gst.Caps out_caps) {
			bool raw_ret = gst_gl_view_convert_set_caps(Handle, in_caps == null ? IntPtr.Zero : in_caps.Handle, out_caps == null ? IntPtr.Zero : out_caps.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_view_convert_submit_input_buffer(IntPtr raw, bool is_discont, IntPtr input);

		public Gst.FlowReturn SubmitInputBuffer(bool is_discont, Gst.Buffer input) {
			input.Owned = false;
			int raw_ret = gst_gl_view_convert_submit_input_buffer(Handle, is_discont, input == null ? IntPtr.Zero : input.Handle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_view_convert_transform_caps(IntPtr raw, int direction, IntPtr caps, IntPtr filter);

		public Gst.Caps TransformCaps(Gst.PadDirection direction, Gst.Caps caps, Gst.Caps filter) {
			IntPtr raw_ret = gst_gl_view_convert_transform_caps(Handle, (int) direction, caps == null ? IntPtr.Zero : caps.Handle, filter == null ? IntPtr.Zero : filter.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}


		static GLViewConvert ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("context"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, null
							, "shader"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("shader"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // shader
							, "context"
							, "input_mode_override"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("input_mode_override"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Video.VideoMultiviewMode))) // input_mode_override
							, "shader"
							, "input_flags_override"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_input_mode_overrideAlign), "input_mode_override")
							, 0
							),
						new GLib.AbiField("input_flags_override"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Video.VideoMultiviewFlags))) // input_flags_override
							, "input_mode_override"
							, "output_mode_override"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_input_flags_overrideAlign), "input_flags_override")
							, 0
							),
						new GLib.AbiField("output_mode_override"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Video.VideoMultiviewMode))) // output_mode_override
							, "input_flags_override"
							, "output_flags_override"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_output_mode_overrideAlign), "output_mode_override")
							, 0
							),
						new GLib.AbiField("output_flags_override"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.Video.VideoMultiviewFlags))) // output_flags_override
							, "output_mode_override"
							, "downmix_mode"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_output_flags_overrideAlign), "output_flags_override")
							, 0
							),
						new GLib.AbiField("downmix_mode"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.GL.GLStereoDownmix))) // downmix_mode
							, "output_flags_override"
							, "in_info"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_downmix_modeAlign), "downmix_mode")
							, 0
							),
						new GLib.AbiField("in_info"
							, -1
							, Gst.Video.VideoInfo.abi_info.Size // in_info
							, "downmix_mode"
							, "out_info"
							, Gst.Video.VideoInfo.abi_info.Align
							, 0
							),
						new GLib.AbiField("out_info"
							, -1
							, Gst.Video.VideoInfo.abi_info.Size // out_info
							, "in_info"
							, "from_texture_target"
							, Gst.Video.VideoInfo.abi_info.Align
							, 0
							),
						new GLib.AbiField("from_texture_target"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.GL.GLTextureTarget))) // from_texture_target
							, "out_info"
							, "to_texture_target"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_from_texture_targetAlign), "from_texture_target")
							, 0
							),
						new GLib.AbiField("to_texture_target"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.GL.GLTextureTarget))) // to_texture_target
							, "from_texture_target"
							, "caps_passthrough"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_to_texture_targetAlign), "to_texture_target")
							, 0
							),
						new GLib.AbiField("caps_passthrough"
							, -1
							, (uint) Marshal.SizeOf(typeof(bool)) // caps_passthrough
							, "to_texture_target"
							, "initted"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_caps_passthroughAlign), "caps_passthrough")
							, 0
							),
						new GLib.AbiField("initted"
							, -1
							, (uint) Marshal.SizeOf(typeof(bool)) // initted
							, "caps_passthrough"
							, "reconfigure"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_inittedAlign), "initted")
							, 0
							),
						new GLib.AbiField("reconfigure"
							, -1
							, (uint) Marshal.SizeOf(typeof(bool)) // reconfigure
							, "initted"
							, "fbo"
							, (long) Marshal.OffsetOf(typeof(GstGLViewConvert_reconfigureAlign), "reconfigure")
							, 0
							),
						new GLib.AbiField("fbo"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // fbo
							, "reconfigure"
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "fbo"
							, "_padding"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_input_mode_overrideAlign
		{
			sbyte f1;
			private Gst.Video.VideoMultiviewMode input_mode_override;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_input_flags_overrideAlign
		{
			sbyte f1;
			private Gst.Video.VideoMultiviewFlags input_flags_override;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_output_mode_overrideAlign
		{
			sbyte f1;
			private Gst.Video.VideoMultiviewMode output_mode_override;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_output_flags_overrideAlign
		{
			sbyte f1;
			private Gst.Video.VideoMultiviewFlags output_flags_override;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_downmix_modeAlign
		{
			sbyte f1;
			private Gst.GL.GLStereoDownmix downmix_mode;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_from_texture_targetAlign
		{
			sbyte f1;
			private Gst.GL.GLTextureTarget from_texture_target;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_to_texture_targetAlign
		{
			sbyte f1;
			private Gst.GL.GLTextureTarget to_texture_target;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_caps_passthroughAlign
		{
			sbyte f1;
			private bool caps_passthrough;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_inittedAlign
		{
			sbyte f1;
			private bool initted;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLViewConvert_reconfigureAlign
		{
			sbyte f1;
			private bool reconfigure;
		}


		// End of the ABI representation.

#endregion
	}
}
