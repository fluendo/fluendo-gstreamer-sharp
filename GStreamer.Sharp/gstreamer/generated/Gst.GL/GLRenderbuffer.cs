// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLRenderbuffer : IEquatable<GLRenderbuffer> {

		private Gst.GL.GLBaseMemory mem;
		public uint RenderbufferId;
		public Gst.GL.GLFormat RenderbufferFormat;
		public int Width;
		public int Height;
		public bool RenderbufferWrapped;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLRenderbuffer Zero = new Gst.GL.GLRenderbuffer ();

		public static Gst.GL.GLRenderbuffer New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLRenderbuffer.Zero;
			return (Gst.GL.GLRenderbuffer) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLRenderbuffer));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_renderbuffer_get_format(IntPtr raw);

		public Gst.GL.GLFormat Format { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				int raw_ret = gst_gl_renderbuffer_get_format(this_as_native);
				Gst.GL.GLFormat ret = (Gst.GL.GLFormat) raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_renderbuffer_get_id(IntPtr raw);

		public uint Id { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				uint raw_ret = gst_gl_renderbuffer_get_id(this_as_native);
				uint ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_renderbuffer_init_once();

		public static void InitOnce() {
			gst_gl_renderbuffer_init_once();
		}

		static void ReadNative (IntPtr native, ref Gst.GL.GLRenderbuffer target)
		{
			target = New (native);
		}

		public bool Equals (GLRenderbuffer other)
		{
			return true && mem.Equals (other.mem) && RenderbufferId.Equals (other.RenderbufferId) && RenderbufferFormat.Equals (other.RenderbufferFormat) && Width.Equals (other.Width) && Height.Equals (other.Height) && RenderbufferWrapped.Equals (other.RenderbufferWrapped);
		}

		public override bool Equals (object other)
		{
			return other is GLRenderbuffer && Equals ((GLRenderbuffer) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ mem.GetHashCode () ^ RenderbufferId.GetHashCode () ^ RenderbufferFormat.GetHashCode () ^ Width.GetHashCode () ^ Height.GetHashCode () ^ RenderbufferWrapped.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
