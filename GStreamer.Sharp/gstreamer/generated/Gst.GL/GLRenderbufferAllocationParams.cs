// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLRenderbufferAllocationParams : IEquatable<GLRenderbufferAllocationParams> {

		private Gst.GL.GLAllocationParams parent;
		public Gst.GL.GLFormat RenderbufferFormat;
		public uint Width;
		public uint Height;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLRenderbufferAllocationParams Zero = new Gst.GL.GLRenderbufferAllocationParams ();

		public static Gst.GL.GLRenderbufferAllocationParams New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLRenderbufferAllocationParams.Zero;
			return (Gst.GL.GLRenderbufferAllocationParams) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLRenderbufferAllocationParams));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_renderbuffer_allocation_params_new(IntPtr context, IntPtr alloc_params, int renderbuffer_format, uint width, uint height);

		public static GLRenderbufferAllocationParams New(Gst.GL.GLContext context, Gst.AllocationParams alloc_params, Gst.GL.GLFormat renderbuffer_format, uint width, uint height)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			GLRenderbufferAllocationParams result = GLRenderbufferAllocationParams.New (gst_gl_renderbuffer_allocation_params_new(context == null ? IntPtr.Zero : context.Handle, native_alloc_params, (int) renderbuffer_format, width, height));
			Marshal.FreeHGlobal (native_alloc_params);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_renderbuffer_allocation_params_new_wrapped(IntPtr context, IntPtr alloc_params, int renderbuffer_format, uint width, uint height, IntPtr gl_handle, IntPtr user_data, GLib.DestroyNotify notify);

		public static GLRenderbufferAllocationParams NewWrapped(Gst.GL.GLContext context, Gst.AllocationParams alloc_params, Gst.GL.GLFormat renderbuffer_format, uint width, uint height, IntPtr gl_handle, IntPtr user_data, GLib.DestroyNotify notify)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			GLRenderbufferAllocationParams result = GLRenderbufferAllocationParams.New (gst_gl_renderbuffer_allocation_params_new_wrapped(context == null ? IntPtr.Zero : context.Handle, native_alloc_params, (int) renderbuffer_format, width, height, gl_handle, user_data, notify));
			Marshal.FreeHGlobal (native_alloc_params);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_renderbuffer_allocation_params_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_renderbuffer_allocation_params_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (GLRenderbufferAllocationParams other)
		{
			return true && parent.Equals (other.parent) && RenderbufferFormat.Equals (other.RenderbufferFormat) && Width.Equals (other.Width) && Height.Equals (other.Height);
		}

		public override bool Equals (object other)
		{
			return other is GLRenderbufferAllocationParams && Equals ((GLRenderbufferAllocationParams) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ parent.GetHashCode () ^ RenderbufferFormat.GetHashCode () ^ Width.GetHashCode () ^ Height.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gst.GL.GLRenderbufferAllocationParams boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gst.GL.GLRenderbufferAllocationParams.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gst.GL.GLRenderbufferAllocationParams (GLib.Value val)
		{
			return (Gst.GL.GLRenderbufferAllocationParams) val.Val;
		}
#endregion
	}
}
