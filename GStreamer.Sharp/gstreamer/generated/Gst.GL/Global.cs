// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Global {

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_add_gl_sync_meta(IntPtr context, IntPtr buffer);

		public static Gst.GL.GLSyncMeta BufferAddGlSyncMeta(Gst.GL.GLContext context, Gst.Buffer buffer) {
			IntPtr raw_ret = gst_buffer_add_gl_sync_meta(context == null ? IntPtr.Zero : context.Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
			Gst.GL.GLSyncMeta ret = Gst.GL.GLSyncMeta.New (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_add_gl_sync_meta_full(IntPtr context, IntPtr buffer, IntPtr data);

		public static Gst.GL.GLSyncMeta BufferAddGlSyncMetaFull(Gst.GL.GLContext context, Gst.Buffer buffer, IntPtr data) {
			IntPtr raw_ret = gst_buffer_add_gl_sync_meta_full(context == null ? IntPtr.Zero : context.Handle, buffer == null ? IntPtr.Zero : buffer.Handle, data);
			Gst.GL.GLSyncMeta ret = Gst.GL.GLSyncMeta.New (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_buffer_pool_config_get_gl_allocation_params(IntPtr config);

		public static Gst.GL.GLAllocationParams BufferPoolConfigGetGlAllocationParams(Gst.Structure config) {
			IntPtr raw_ret = gst_buffer_pool_config_get_gl_allocation_params(config == null ? IntPtr.Zero : config.Handle);
			Gst.GL.GLAllocationParams ret = Gst.GL.GLAllocationParams.New (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_buffer_pool_config_set_gl_allocation_params(IntPtr config, IntPtr parms);

		public static void BufferPoolConfigSetGlAllocationParams(Gst.Structure config, Gst.GL.GLAllocationParams parms) {
			IntPtr native_parms = GLib.Marshaller.StructureToPtrAlloc (parms);
			gst_buffer_pool_config_set_gl_allocation_params(config == null ? IntPtr.Zero : config.Handle, native_parms);
			Marshal.FreeHGlobal (native_parms);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_context_get_gl_display(IntPtr context, out IntPtr display);

		public static bool ContextGetGlDisplay(Gst.Context context, out Gst.GL.GLDisplay display) {
			IntPtr native_context = GLib.Marshaller.StructureToPtrAlloc (context);
			IntPtr native_display;
			bool raw_ret = gst_context_get_gl_display(native_context, out native_display);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_context);
			display = GLib.Object.GetObject(native_display, true) as Gst.GL.GLDisplay;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_context_set_gl_display(IntPtr context, IntPtr display);

		public static void ContextSetGlDisplay(Gst.Context context, Gst.GL.GLDisplay display) {
			IntPtr native_context = GLib.Marshaller.StructureToPtrAlloc (context);
			gst_context_set_gl_display(native_context, display == null ? IntPtr.Zero : display.Handle);
			Marshal.FreeHGlobal (native_context);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_api_from_string(IntPtr api_s);

		public static Gst.GL.GLAPI GlApiFromString(string api_s) {
			IntPtr native_api_s = GLib.Marshaller.StringToPtrGStrdup (api_s);
			int raw_ret = gst_gl_api_from_string(native_api_s);
			Gst.GL.GLAPI ret = (Gst.GL.GLAPI) raw_ret;
			GLib.Marshaller.Free (native_api_s);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_api_to_string(int api);

		public static string GlApiToString(Gst.GL.GLAPI api) {
			IntPtr raw_ret = gst_gl_api_to_string((int) api);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_base_memory_alloc(IntPtr allocator, IntPtr parms);

		public static Gst.GL.GLBaseMemory GlBaseMemoryAlloc(Gst.GL.GLBaseMemoryAllocator allocator, Gst.GL.GLAllocationParams parms) {
			IntPtr native_parms = GLib.Marshaller.StructureToPtrAlloc (parms);
			IntPtr raw_ret = gst_gl_base_memory_alloc(allocator == null ? IntPtr.Zero : allocator.Handle, native_parms);
			Gst.GL.GLBaseMemory ret = Gst.GL.GLBaseMemory.New (raw_ret);
			Marshal.FreeHGlobal (native_parms);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_base_memory_error_quark();

		public static uint GlBaseMemoryErrorQuark() {
			uint raw_ret = gst_gl_base_memory_error_quark();
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_base_memory_init_once();

		public static void GlBaseMemoryInitOnce() {
			gst_gl_base_memory_init_once();
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_buffer_init_once();

		public static void GlBufferInitOnce() {
			gst_gl_buffer_init_once();
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_check_extension(IntPtr name, IntPtr ext);

		public static bool GlCheckExtension(string name, string ext) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_ext = GLib.Marshaller.StringToPtrGStrdup (ext);
			bool raw_ret = gst_gl_check_extension(native_name, native_ext);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_ext);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_context_error_quark();

		public static uint GlContextErrorQuark() {
			uint raw_ret = gst_gl_context_error_quark();
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_element_propagate_display_context(IntPtr element, IntPtr display);

		public static void GlElementPropagateDisplayContext(Gst.Element element, Gst.GL.GLDisplay display) {
			gst_gl_element_propagate_display_context(element == null ? IntPtr.Zero : element.Handle, display == null ? IntPtr.Zero : display.Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_ensure_element_data(IntPtr element, ref IntPtr display_ptr, ref IntPtr other_context_ptr);

		public static bool GlEnsureElementData(IntPtr element, ref Gst.GL.GLDisplay display_ptr, ref Gst.GL.GLContext other_context_ptr) {
			IntPtr native_display_ptr = (IntPtr) display_ptr;
			IntPtr native_other_context_ptr = (IntPtr) other_context_ptr;
			bool raw_ret = gst_gl_ensure_element_data(element, ref native_display_ptr, ref native_other_context_ptr);
			bool ret = raw_ret;
			display_ptr = GLib.Object.GetObject(native_display_ptr, true) as Gst.GL.GLDisplay;
			other_context_ptr = GLib.Object.GetObject(native_other_context_ptr, true) as Gst.GL.GLContext;
			return ret;
		}

		public static bool GlEnsureElementData(ref Gst.GL.GLDisplay display_ptr, ref Gst.GL.GLContext other_context_ptr) {
			return GlEnsureElementData (IntPtr.Zero, ref display_ptr, ref other_context_ptr);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_format_from_video_info(IntPtr context, IntPtr vinfo, uint plane);

		public static Gst.GL.GLFormat GlFormatFromVideoInfo(Gst.GL.GLContext context, Gst.Video.VideoInfo vinfo, uint plane) {
			int raw_ret = gst_gl_format_from_video_info(context == null ? IntPtr.Zero : context.Handle, vinfo == null ? IntPtr.Zero : vinfo.Handle, plane);
			Gst.GL.GLFormat ret = (Gst.GL.GLFormat) raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_format_is_supported(IntPtr context, int format);

		public static bool GlFormatIsSupported(Gst.GL.GLContext context, Gst.GL.GLFormat format) {
			bool raw_ret = gst_gl_format_is_supported(context == null ? IntPtr.Zero : context.Handle, (int) format);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_format_type_from_sized_gl_format(int format, out int unsized_format, out uint gl_type);

		public static void GlFormatTypeFromSizedGlFormat(Gst.GL.GLFormat format, out Gst.GL.GLFormat unsized_format, out uint gl_type) {
			int native_unsized_format;
			gst_gl_format_type_from_sized_gl_format((int) format, out native_unsized_format, out gl_type);
			unsized_format = (Gst.GL.GLFormat) native_unsized_format;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_format_type_n_bytes(uint format, uint type);

		public static uint GlFormatTypeNBytes(uint format, uint type) {
			uint raw_ret = gst_gl_format_type_n_bytes(format, type);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_gl_get_plane_data_size(IntPtr info, IntPtr align, uint plane);

		public static ulong GlGetPlaneDataSize(Gst.Video.VideoInfo info, Gst.Video.VideoAlignment align, uint plane) {
			IntPtr native_align = GLib.Marshaller.StructureToPtrAlloc (align);
			UIntPtr raw_ret = gst_gl_get_plane_data_size(info == null ? IntPtr.Zero : info.Handle, native_align, plane);
			ulong ret = (ulong) raw_ret;
			Marshal.FreeHGlobal (native_align);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_gl_get_plane_start(IntPtr info, IntPtr valign, uint plane);

		public static ulong GlGetPlaneStart(Gst.Video.VideoInfo info, Gst.Video.VideoAlignment valign, uint plane) {
			IntPtr native_valign = GLib.Marshaller.StructureToPtrAlloc (valign);
			UIntPtr raw_ret = gst_gl_get_plane_start(info == null ? IntPtr.Zero : info.Handle, native_valign, plane);
			ulong ret = (ulong) raw_ret;
			Marshal.FreeHGlobal (native_valign);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_handle_context_query(IntPtr element, IntPtr query, IntPtr display, IntPtr context, IntPtr other_context);

		public static bool GlHandleContextQuery(Gst.Element element, Gst.Query query, Gst.GL.GLDisplay display, Gst.GL.GLContext context, Gst.GL.GLContext other_context) {
			bool raw_ret = gst_gl_handle_context_query(element == null ? IntPtr.Zero : element.Handle, query == null ? IntPtr.Zero : query.Handle, display == null ? IntPtr.Zero : display.Handle, context == null ? IntPtr.Zero : context.Handle, other_context == null ? IntPtr.Zero : other_context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		public static bool GlHandleContextQuery(Gst.Element element, Gst.Query query) {
			return GlHandleContextQuery (element, query, null, null, null);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_handle_set_context(IntPtr element, IntPtr context, ref IntPtr display, ref IntPtr other_context);

		public static bool GlHandleSetContext(Gst.Element element, Gst.Context context, ref Gst.GL.GLDisplay display, ref Gst.GL.GLContext other_context) {
			IntPtr native_context = GLib.Marshaller.StructureToPtrAlloc (context);
			IntPtr native_display = (IntPtr) display;
			IntPtr native_other_context = (IntPtr) other_context;
			bool raw_ret = gst_gl_handle_set_context(element == null ? IntPtr.Zero : element.Handle, native_context, ref native_display, ref native_other_context);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_context);
			display = GLib.Object.GetObject(native_display, true) as Gst.GL.GLDisplay;
			other_context = GLib.Object.GetObject(native_other_context, true) as Gst.GL.GLContext;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_memory_init_once();

		public static void GlMemoryInitOnce() {
			gst_gl_memory_init_once();
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_memory_pbo_init_once();

		public static void GlMemoryPboInitOnce() {
			gst_gl_memory_pbo_init_once();
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_platform_from_string(IntPtr platform_s);

		public static Gst.GL.GLPlatform GlPlatformFromString(string platform_s) {
			IntPtr native_platform_s = GLib.Marshaller.StringToPtrGStrdup (platform_s);
			int raw_ret = gst_gl_platform_from_string(native_platform_s);
			Gst.GL.GLPlatform ret = (Gst.GL.GLPlatform) raw_ret;
			GLib.Marshaller.Free (native_platform_s);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_platform_to_string(int platform);

		public static string GlPlatformToString(Gst.GL.GLPlatform platform) {
			IntPtr raw_ret = gst_gl_platform_to_string((int) platform);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_query_local_gl_context(IntPtr element, int direction, ref IntPtr context_ptr);

		public static bool GlQueryLocalGlContext(Gst.Element element, Gst.PadDirection direction, ref Gst.GL.GLContext context_ptr) {
			IntPtr native_context_ptr = (IntPtr) context_ptr;
			bool raw_ret = gst_gl_query_local_gl_context(element == null ? IntPtr.Zero : element.Handle, (int) direction, ref native_context_ptr);
			bool ret = raw_ret;
			context_ptr = GLib.Object.GetObject(native_context_ptr, true) as Gst.GL.GLContext;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_renderbuffer_init_once();

		public static void GlRenderbufferInitOnce() {
			gst_gl_renderbuffer_init_once();
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_sized_gl_format_from_gl_format_type(IntPtr context, uint format, uint type);

		public static uint GlSizedGlFormatFromGlFormatType(Gst.GL.GLContext context, uint format, uint type) {
			uint raw_ret = gst_gl_sized_gl_format_from_gl_format_type(context == null ? IntPtr.Zero : context.Handle, format, type);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_stereo_downmix_mode_get_type();

		public static GLib.GType GlStereoDownmixModeGetType() {
			IntPtr raw_ret = gst_gl_stereo_downmix_mode_get_type();
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_sync_meta_api_get_type();

		public static GLib.GType GlSyncMetaApiGetType() {
			IntPtr raw_ret = gst_gl_sync_meta_api_get_type();
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_sync_meta_get_info();

		public static Gst.MetaInfo GlSyncMetaGetInfo() {
			IntPtr raw_ret = gst_gl_sync_meta_get_info();
			Gst.MetaInfo ret = Gst.MetaInfo.New (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_texture_target_from_gl(uint target);

		public static Gst.GL.GLTextureTarget GlTextureTargetFromGl(uint target) {
			int raw_ret = gst_gl_texture_target_from_gl(target);
			Gst.GL.GLTextureTarget ret = (Gst.GL.GLTextureTarget) raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_texture_target_from_string(IntPtr str);

		public static Gst.GL.GLTextureTarget GlTextureTargetFromString(string str) {
			IntPtr native_str = GLib.Marshaller.StringToPtrGStrdup (str);
			int raw_ret = gst_gl_texture_target_from_string(native_str);
			Gst.GL.GLTextureTarget ret = (Gst.GL.GLTextureTarget) raw_ret;
			GLib.Marshaller.Free (native_str);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_texture_target_to_buffer_pool_option(int target);

		public static string GlTextureTargetToBufferPoolOption(Gst.GL.GLTextureTarget target) {
			IntPtr raw_ret = gst_gl_texture_target_to_buffer_pool_option((int) target);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_texture_target_to_gl(int target);

		public static uint GlTextureTargetToGl(Gst.GL.GLTextureTarget target) {
			uint raw_ret = gst_gl_texture_target_to_gl((int) target);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_texture_target_to_string(int target);

		public static string GlTextureTargetToString(Gst.GL.GLTextureTarget target) {
			IntPtr raw_ret = gst_gl_texture_target_to_string((int) target);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_value_get_texture_target_mask(IntPtr value);

		public static Gst.GL.GLTextureTarget GlValueGetTextureTargetMask(GLib.Value value) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			int raw_ret = gst_gl_value_get_texture_target_mask(native_value);
			Gst.GL.GLTextureTarget ret = (Gst.GL.GLTextureTarget) raw_ret;
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_value_set_texture_target(IntPtr value, int target);

		public static bool GlValueSetTextureTarget(GLib.Value value, Gst.GL.GLTextureTarget target) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gst_gl_value_set_texture_target(native_value, (int) target);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_value_set_texture_target_from_mask(IntPtr value, int target_mask);

		public static bool GlValueSetTextureTargetFromMask(GLib.Value value, Gst.GL.GLTextureTarget target_mask) {
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gst_gl_value_set_texture_target_from_mask(native_value, (int) target_mask);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_version_to_glsl_version(int gl_api, int maj, int min);

		public static Gst.GL.GLSLVersion GlVersionToGlslVersion(Gst.GL.GLAPI gl_api, int maj, int min) {
			int raw_ret = gst_gl_version_to_glsl_version((int) gl_api, maj, min);
			Gst.GL.GLSLVersion ret = (Gst.GL.GLSLVersion) raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_window_error_quark();

		public static uint GlWindowErrorQuark() {
			uint raw_ret = gst_gl_window_error_quark();
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_glsl_error_quark();

		public static uint GlslErrorQuark() {
			uint raw_ret = gst_glsl_error_quark();
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_glsl_profile_from_string(IntPtr str1ng);

		public static Gst.GL.GLSLProfile GlslProfileFromString(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			int raw_ret = gst_glsl_profile_from_string(native_str1ng);
			Gst.GL.GLSLProfile ret = (Gst.GL.GLSLProfile) raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_profile_to_string(int profile);

		public static string GlslProfileToString(Gst.GL.GLSLProfile profile) {
			IntPtr raw_ret = gst_glsl_profile_to_string((int) profile);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_glsl_string_get_version_profile(IntPtr s, out int version, out int profile);

		public static bool GlslStringGetVersionProfile(string s, out Gst.GL.GLSLVersion version, out Gst.GL.GLSLProfile profile) {
			IntPtr native_s = GLib.Marshaller.StringToPtrGStrdup (s);
			int native_version;
			int native_profile;
			bool raw_ret = gst_glsl_string_get_version_profile(native_s, out native_version, out native_profile);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_s);
			version = (Gst.GL.GLSLVersion) native_version;
			profile = (Gst.GL.GLSLProfile) native_profile;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_glsl_version_from_string(IntPtr str1ng);

		public static Gst.GL.GLSLVersion GlslVersionFromString(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			int raw_ret = gst_glsl_version_from_string(native_str1ng);
			Gst.GL.GLSLVersion ret = (Gst.GL.GLSLVersion) raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_glsl_version_profile_from_string(IntPtr str1ng, out int version_ret, out int profile_ret);

		public static bool GlslVersionProfileFromString(string str1ng, out Gst.GL.GLSLVersion version_ret, out Gst.GL.GLSLProfile profile_ret) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			int native_version_ret;
			int native_profile_ret;
			bool raw_ret = gst_glsl_version_profile_from_string(native_str1ng, out native_version_ret, out native_profile_ret);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_str1ng);
			version_ret = (Gst.GL.GLSLVersion) native_version_ret;
			profile_ret = (Gst.GL.GLSLProfile) native_profile_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_version_profile_to_string(int version, int profile);

		public static string GlslVersionProfileToString(Gst.GL.GLSLVersion version, Gst.GL.GLSLProfile profile) {
			IntPtr raw_ret = gst_glsl_version_profile_to_string((int) version, (int) profile);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_glsl_version_to_string(int version);

		public static string GlslVersionToString(Gst.GL.GLSLVersion version) {
			IntPtr raw_ret = gst_glsl_version_to_string((int) version);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_is_gl_base_memory(IntPtr mem);

		public static bool IsGlBaseMemory(Gst.Memory mem) {
			bool raw_ret = gst_is_gl_base_memory(mem == null ? IntPtr.Zero : mem.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_is_gl_buffer(IntPtr mem);

		public static bool IsGlBuffer(Gst.Memory mem) {
			bool raw_ret = gst_is_gl_buffer(mem == null ? IntPtr.Zero : mem.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_is_gl_memory(IntPtr mem);

		public static bool IsGlMemory(Gst.Memory mem) {
			bool raw_ret = gst_is_gl_memory(mem == null ? IntPtr.Zero : mem.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_is_gl_memory_pbo(IntPtr mem);

		public static bool IsGlMemoryPbo(Gst.Memory mem) {
			bool raw_ret = gst_is_gl_memory_pbo(mem == null ? IntPtr.Zero : mem.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_is_gl_renderbuffer(IntPtr mem);

		public static bool IsGlRenderbuffer(Gst.Memory mem) {
			bool raw_ret = gst_is_gl_renderbuffer(mem == null ? IntPtr.Zero : mem.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
