// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLColorConvert : Gst.Object {

		public GLColorConvert (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_color_convert_new(IntPtr context);

		public GLColorConvert (Gst.GL.GLContext context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLColorConvert)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_gl_color_convert_new(context == null ? IntPtr.Zero : context.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_padding"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_color_convert_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_color_convert_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_color_convert_fixate_caps(IntPtr context, int direction, IntPtr caps, IntPtr other);

		public static Gst.Caps FixateCaps(Gst.GL.GLContext context, Gst.PadDirection direction, Gst.Caps caps, Gst.Caps other) {
			other.Owned = false;
			IntPtr raw_ret = gst_gl_color_convert_fixate_caps(context == null ? IntPtr.Zero : context.Handle, (int) direction, caps == null ? IntPtr.Zero : caps.Handle, other == null ? IntPtr.Zero : other.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_color_convert_transform_caps(IntPtr context, int direction, IntPtr caps, IntPtr filter);

		public static Gst.Caps TransformCaps(Gst.GL.GLContext context, Gst.PadDirection direction, Gst.Caps caps, Gst.Caps filter) {
			IntPtr raw_ret = gst_gl_color_convert_transform_caps(context == null ? IntPtr.Zero : context.Handle, (int) direction, caps == null ? IntPtr.Zero : caps.Handle, filter == null ? IntPtr.Zero : filter.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_color_convert_decide_allocation(IntPtr raw, IntPtr query);

		public bool DecideAllocation(Gst.Query query) {
			bool raw_ret = gst_gl_color_convert_decide_allocation(Handle, query == null ? IntPtr.Zero : query.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_color_convert_perform(IntPtr raw, IntPtr inbuf);

		public Gst.Buffer Perform(Gst.Buffer inbuf) {
			IntPtr raw_ret = gst_gl_color_convert_perform(Handle, inbuf == null ? IntPtr.Zero : inbuf.Handle);
			Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_color_convert_set_caps(IntPtr raw, IntPtr in_caps, IntPtr out_caps);

		public bool SetCaps(Gst.Caps in_caps, Gst.Caps out_caps) {
			bool raw_ret = gst_gl_color_convert_set_caps(Handle, in_caps == null ? IntPtr.Zero : in_caps.Handle, out_caps == null ? IntPtr.Zero : out_caps.Handle);
			bool ret = raw_ret;
			return ret;
		}


		static GLColorConvert ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("context"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, null
							, "in_info"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("in_info"
							, -1
							, Gst.Video.VideoInfo.abi_info.Size // in_info
							, "context"
							, "out_info"
							, Gst.Video.VideoInfo.abi_info.Align
							, 0
							),
						new GLib.AbiField("out_info"
							, -1
							, Gst.Video.VideoInfo.abi_info.Size // out_info
							, "in_info"
							, "initted"
							, Gst.Video.VideoInfo.abi_info.Align
							, 0
							),
						new GLib.AbiField("initted"
							, -1
							, (uint) Marshal.SizeOf(typeof(bool)) // initted
							, "out_info"
							, "passthrough"
							, (long) Marshal.OffsetOf(typeof(GstGLColorConvert_inittedAlign), "initted")
							, 0
							),
						new GLib.AbiField("passthrough"
							, -1
							, (uint) Marshal.SizeOf(typeof(bool)) // passthrough
							, "initted"
							, "inbuf"
							, (long) Marshal.OffsetOf(typeof(GstGLColorConvert_passthroughAlign), "passthrough")
							, 0
							),
						new GLib.AbiField("inbuf"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // inbuf
							, "passthrough"
							, "outbuf"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("outbuf"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // outbuf
							, "inbuf"
							, "fbo"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("fbo"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // fbo
							, "outbuf"
							, "shader"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("shader"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // shader
							, "fbo"
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "shader"
							, "_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLColorConvert_inittedAlign
		{
			sbyte f1;
			private bool initted;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLColorConvert_passthroughAlign
		{
			sbyte f1;
			private bool passthrough;
		}


		// End of the ABI representation.

#endregion
	}
}
