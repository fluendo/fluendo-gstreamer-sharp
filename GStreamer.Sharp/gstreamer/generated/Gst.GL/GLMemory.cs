// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLMemory : IEquatable<GLMemory> {

		public Gst.GL.GLBaseMemory Mem;
		public uint TexId;
		public Gst.GL.GLTextureTarget TexTarget;
		public Gst.GL.GLFormat TexFormat;
		private IntPtr _info;
		public Gst.Video.VideoInfo Info {
			get {
				return _info == IntPtr.Zero ? null : (Gst.Video.VideoInfo) GLib.Opaque.GetOpaque (_info, typeof (Gst.Video.VideoInfo), false);
			}
			set {
				_info = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public Gst.Video.VideoAlignment Valign;
		public uint Plane;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		public float[] TexScaling;
		public bool TextureWrapped;
		public uint UnpackLength;
		public uint TexWidth;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLMemory Zero = new Gst.GL.GLMemory ();

		public static Gst.GL.GLMemory New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLMemory.Zero;
			return (Gst.GL.GLMemory) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLMemory));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_memory_copy_into(IntPtr raw, uint tex_id, int target, int tex_format, int width, int height);

		public bool CopyInto(uint tex_id, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format, int width, int height) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			bool raw_ret = gst_gl_memory_copy_into(this_as_native, tex_id, (int) target, (int) tex_format, width, height);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_memory_copy_teximage(IntPtr raw, uint tex_id, int out_target, int out_tex_format, int out_width, int out_height);

		public bool CopyTeximage(uint tex_id, Gst.GL.GLTextureTarget out_target, Gst.GL.GLFormat out_tex_format, int out_width, int out_height) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			bool raw_ret = gst_gl_memory_copy_teximage(this_as_native, tex_id, (int) out_target, (int) out_tex_format, out_width, out_height);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_memory_get_texture_format(IntPtr raw);

		public Gst.GL.GLFormat TextureFormat { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				int raw_ret = gst_gl_memory_get_texture_format(this_as_native);
				Gst.GL.GLFormat ret = (Gst.GL.GLFormat) raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_memory_get_texture_height(IntPtr raw);

		public int TextureHeight { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				int raw_ret = gst_gl_memory_get_texture_height(this_as_native);
				int ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_memory_get_texture_id(IntPtr raw);

		public uint TextureId { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				uint raw_ret = gst_gl_memory_get_texture_id(this_as_native);
				uint ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_memory_get_texture_target(IntPtr raw);

		public Gst.GL.GLTextureTarget TextureTarget { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				int raw_ret = gst_gl_memory_get_texture_target(this_as_native);
				Gst.GL.GLTextureTarget ret = (Gst.GL.GLTextureTarget) raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_memory_get_texture_width(IntPtr raw);

		public int TextureWidth { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				int raw_ret = gst_gl_memory_get_texture_width(this_as_native);
				int ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_memory_init(IntPtr raw, IntPtr allocator, IntPtr parent, IntPtr context, int target, int tex_format, IntPtr parms, IntPtr info, uint plane, IntPtr valign, IntPtr user_data, GLib.DestroyNotify notify);

		public void Init(Gst.Allocator allocator, Gst.Memory parent, Gst.GL.GLContext context, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format, Gst.AllocationParams parms, Gst.Video.VideoInfo info, uint plane, Gst.Video.VideoAlignment valign, IntPtr user_data, GLib.DestroyNotify notify) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_parms = GLib.Marshaller.StructureToPtrAlloc (parms);
			IntPtr native_valign = GLib.Marshaller.StructureToPtrAlloc (valign);
			gst_gl_memory_init(this_as_native, allocator == null ? IntPtr.Zero : allocator.Handle, parent == null ? IntPtr.Zero : parent.Handle, context == null ? IntPtr.Zero : context.Handle, (int) target, (int) tex_format, native_parms, info == null ? IntPtr.Zero : info.Handle, plane, native_valign, user_data, notify);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			Marshal.FreeHGlobal (native_parms);
			Marshal.FreeHGlobal (native_valign);
		}

		public void Init(Gst.Allocator allocator, Gst.GL.GLContext context, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format, Gst.Video.VideoInfo info, uint plane) {
			Init (allocator, null, context, target, tex_format, Gst.AllocationParams.Zero, info, plane, Gst.Video.VideoAlignment.Zero, IntPtr.Zero, null);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_memory_read_pixels(IntPtr raw, IntPtr write_pointer);

		public bool ReadPixels(IntPtr write_pointer) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			bool raw_ret = gst_gl_memory_read_pixels(this_as_native, write_pointer);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		public bool ReadPixels() {
			return ReadPixels (IntPtr.Zero);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_memory_texsubimage(IntPtr raw, IntPtr read_pointer);

		public void Texsubimage(IntPtr read_pointer) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_memory_texsubimage(this_as_native, read_pointer);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		public void Texsubimage() {
			Texsubimage (IntPtr.Zero);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_memory_init_once();

		public static void InitOnce() {
			gst_gl_memory_init_once();
		}

		static void ReadNative (IntPtr native, ref Gst.GL.GLMemory target)
		{
			target = New (native);
		}

		public bool Equals (GLMemory other)
		{
			return true && Mem.Equals (other.Mem) && TexId.Equals (other.TexId) && TexTarget.Equals (other.TexTarget) && TexFormat.Equals (other.TexFormat) && Info.Equals (other.Info) && Valign.Equals (other.Valign) && Plane.Equals (other.Plane) && TexScaling.Equals (other.TexScaling) && TextureWrapped.Equals (other.TextureWrapped) && UnpackLength.Equals (other.UnpackLength) && TexWidth.Equals (other.TexWidth);
		}

		public override bool Equals (object other)
		{
			return other is GLMemory && Equals ((GLMemory) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Mem.GetHashCode () ^ TexId.GetHashCode () ^ TexTarget.GetHashCode () ^ TexFormat.GetHashCode () ^ Info.GetHashCode () ^ Valign.GetHashCode () ^ Plane.GetHashCode () ^ TexScaling.GetHashCode () ^ TextureWrapped.GetHashCode () ^ UnpackLength.GetHashCode () ^ TexWidth.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
