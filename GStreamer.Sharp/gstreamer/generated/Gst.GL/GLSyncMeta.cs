// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLSyncMeta : IEquatable<GLSyncMeta> {

		public Gst.Meta Parent;
		private IntPtr _context;
		public Gst.GL.GLContext Context {
			get {
				return GLib.Object.GetObject(_context) as Gst.GL.GLContext;
			}
			set {
				_context = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _data;
		private IntPtr _set_sync;
		private IntPtr _set_sync_gl;
		private IntPtr _wait;
		private IntPtr _wait_gl;
		private IntPtr _wait_cpu;
		private IntPtr _wait_cpu_gl;
		private IntPtr _copy;
		private IntPtr _free;
		private IntPtr _free_gl;

		public static Gst.GL.GLSyncMeta Zero = new Gst.GL.GLSyncMeta ();

		public static Gst.GL.GLSyncMeta New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLSyncMeta.Zero;
			return (Gst.GL.GLSyncMeta) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLSyncMeta));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_sync_meta_set_sync_point(IntPtr raw, IntPtr context);

		public Gst.GL.GLContext SyncPoint { 
			set {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				gst_gl_sync_meta_set_sync_point(this_as_native, value == null ? IntPtr.Zero : value.Handle);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_sync_meta_wait(IntPtr raw, IntPtr context);

		public void Wait(Gst.GL.GLContext context) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_sync_meta_wait(this_as_native, context == null ? IntPtr.Zero : context.Handle);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_sync_meta_wait_cpu(IntPtr raw, IntPtr context);

		public void WaitCpu(Gst.GL.GLContext context) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_sync_meta_wait_cpu(this_as_native, context == null ? IntPtr.Zero : context.Handle);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_sync_meta_get_info();

		public static Gst.MetaInfo Info { 
			get {
				IntPtr raw_ret = gst_gl_sync_meta_get_info();
				Gst.MetaInfo ret = Gst.MetaInfo.New (raw_ret);
				return ret;
			}
		}

		static void ReadNative (IntPtr native, ref Gst.GL.GLSyncMeta target)
		{
			target = New (native);
		}

		public bool Equals (GLSyncMeta other)
		{
			return true && Parent.Equals (other.Parent) && Context.Equals (other.Context) && _data.Equals (other._data) && _set_sync.Equals (other._set_sync) && _set_sync_gl.Equals (other._set_sync_gl) && _wait.Equals (other._wait) && _wait_gl.Equals (other._wait_gl) && _wait_cpu.Equals (other._wait_cpu) && _wait_cpu_gl.Equals (other._wait_cpu_gl) && _copy.Equals (other._copy) && _free.Equals (other._free) && _free_gl.Equals (other._free_gl);
		}

		public override bool Equals (object other)
		{
			return other is GLSyncMeta && Equals ((GLSyncMeta) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Parent.GetHashCode () ^ Context.GetHashCode () ^ _data.GetHashCode () ^ _set_sync.GetHashCode () ^ _set_sync_gl.GetHashCode () ^ _wait.GetHashCode () ^ _wait_gl.GetHashCode () ^ _wait_cpu.GetHashCode () ^ _wait_cpu_gl.GetHashCode () ^ _copy.GetHashCode () ^ _free.GetHashCode () ^ _free_gl.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
