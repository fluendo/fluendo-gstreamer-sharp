// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLVideoAllocationParams : IEquatable<GLVideoAllocationParams> {

		public Gst.GL.GLAllocationParams Parent;
		private IntPtr _v_info;
		public Gst.Video.VideoInfo VInfo {
			get {
				return _v_info == IntPtr.Zero ? null : (Gst.Video.VideoInfo) GLib.Opaque.GetOpaque (_v_info, typeof (Gst.Video.VideoInfo), false);
			}
			set {
				_v_info = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public uint Plane;
		private IntPtr _valign;

		public Gst.Video.VideoAlignment valign {
			get { return Gst.Video.VideoAlignment.New (_valign); }
		}
		public Gst.GL.GLTextureTarget Target;
		public Gst.GL.GLFormat TexFormat;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLVideoAllocationParams Zero = new Gst.GL.GLVideoAllocationParams ();

		public static Gst.GL.GLVideoAllocationParams New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLVideoAllocationParams.Zero;
			return (Gst.GL.GLVideoAllocationParams) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLVideoAllocationParams));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_video_allocation_params_new(IntPtr context, IntPtr alloc_params, IntPtr v_info, uint plane, IntPtr valign, int target, int tex_format);

		public static GLVideoAllocationParams New(Gst.GL.GLContext context, Gst.AllocationParams alloc_params, Gst.Video.VideoInfo v_info, uint plane, Gst.Video.VideoAlignment valign, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			IntPtr native_valign = GLib.Marshaller.StructureToPtrAlloc (valign);
			GLVideoAllocationParams result = GLVideoAllocationParams.New (gst_gl_video_allocation_params_new(context == null ? IntPtr.Zero : context.Handle, native_alloc_params, v_info == null ? IntPtr.Zero : v_info.Handle, plane, native_valign, (int) target, (int) tex_format));
			Marshal.FreeHGlobal (native_alloc_params);
			Marshal.FreeHGlobal (native_valign);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_video_allocation_params_new_wrapped_data(IntPtr context, IntPtr alloc_params, IntPtr v_info, uint plane, IntPtr valign, int target, int tex_format, IntPtr wrapped_data, IntPtr user_data, GLib.DestroyNotify notify);

		public static GLVideoAllocationParams NewWrappedData(Gst.GL.GLContext context, Gst.AllocationParams alloc_params, Gst.Video.VideoInfo v_info, uint plane, Gst.Video.VideoAlignment valign, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format, IntPtr wrapped_data, IntPtr user_data, GLib.DestroyNotify notify)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			IntPtr native_valign = GLib.Marshaller.StructureToPtrAlloc (valign);
			GLVideoAllocationParams result = GLVideoAllocationParams.New (gst_gl_video_allocation_params_new_wrapped_data(context == null ? IntPtr.Zero : context.Handle, native_alloc_params, v_info == null ? IntPtr.Zero : v_info.Handle, plane, native_valign, (int) target, (int) tex_format, wrapped_data, user_data, notify));
			Marshal.FreeHGlobal (native_alloc_params);
			Marshal.FreeHGlobal (native_valign);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_video_allocation_params_new_wrapped_gl_handle(IntPtr context, IntPtr alloc_params, IntPtr v_info, uint plane, IntPtr valign, int target, int tex_format, IntPtr gl_handle, IntPtr user_data, GLib.DestroyNotify notify);

		public static GLVideoAllocationParams NewWrappedGlHandle(Gst.GL.GLContext context, Gst.AllocationParams alloc_params, Gst.Video.VideoInfo v_info, uint plane, Gst.Video.VideoAlignment valign, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format, IntPtr gl_handle, IntPtr user_data, GLib.DestroyNotify notify)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			IntPtr native_valign = GLib.Marshaller.StructureToPtrAlloc (valign);
			GLVideoAllocationParams result = GLVideoAllocationParams.New (gst_gl_video_allocation_params_new_wrapped_gl_handle(context == null ? IntPtr.Zero : context.Handle, native_alloc_params, v_info == null ? IntPtr.Zero : v_info.Handle, plane, native_valign, (int) target, (int) tex_format, gl_handle, user_data, notify));
			Marshal.FreeHGlobal (native_alloc_params);
			Marshal.FreeHGlobal (native_valign);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_video_allocation_params_new_wrapped_texture(IntPtr context, IntPtr alloc_params, IntPtr v_info, uint plane, IntPtr valign, int target, int tex_format, uint tex_id, IntPtr user_data, GLib.DestroyNotify notify);

		public static GLVideoAllocationParams NewWrappedTexture(Gst.GL.GLContext context, Gst.AllocationParams alloc_params, Gst.Video.VideoInfo v_info, uint plane, Gst.Video.VideoAlignment valign, Gst.GL.GLTextureTarget target, Gst.GL.GLFormat tex_format, uint tex_id, IntPtr user_data, GLib.DestroyNotify notify)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			IntPtr native_valign = GLib.Marshaller.StructureToPtrAlloc (valign);
			GLVideoAllocationParams result = GLVideoAllocationParams.New (gst_gl_video_allocation_params_new_wrapped_texture(context == null ? IntPtr.Zero : context.Handle, native_alloc_params, v_info == null ? IntPtr.Zero : v_info.Handle, plane, native_valign, (int) target, (int) tex_format, tex_id, user_data, notify));
			Marshal.FreeHGlobal (native_alloc_params);
			Marshal.FreeHGlobal (native_valign);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_video_allocation_params_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_video_allocation_params_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_video_allocation_params_copy_data(IntPtr raw, IntPtr dest_vid);

		public void CopyData(Gst.GL.GLVideoAllocationParams dest_vid) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_dest_vid = GLib.Marshaller.StructureToPtrAlloc (dest_vid);
			gst_gl_video_allocation_params_copy_data(this_as_native, native_dest_vid);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			Marshal.FreeHGlobal (native_dest_vid);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_video_allocation_params_free_data(IntPtr raw);

		public void FreeData() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			gst_gl_video_allocation_params_free_data(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		static void ReadNative (IntPtr native, ref Gst.GL.GLVideoAllocationParams target)
		{
			target = New (native);
		}

		public bool Equals (GLVideoAllocationParams other)
		{
			return true && Parent.Equals (other.Parent) && VInfo.Equals (other.VInfo) && Plane.Equals (other.Plane) && valign.Equals (other.valign) && Target.Equals (other.Target) && TexFormat.Equals (other.TexFormat);
		}

		public override bool Equals (object other)
		{
			return other is GLVideoAllocationParams && Equals ((GLVideoAllocationParams) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Parent.GetHashCode () ^ VInfo.GetHashCode () ^ Plane.GetHashCode () ^ valign.GetHashCode () ^ Target.GetHashCode () ^ TexFormat.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gst.GL.GLVideoAllocationParams boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gst.GL.GLVideoAllocationParams.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gst.GL.GLVideoAllocationParams (GLib.Value val)
		{
			return (Gst.GL.GLVideoAllocationParams) val.Val;
		}
#endregion
	}
}
