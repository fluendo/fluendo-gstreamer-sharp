// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GLSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate bool GLBaseMemoryAllocatorCreateFunctionNative(IntPtr mem, out IntPtr error);

	internal class GLBaseMemoryAllocatorCreateFunctionInvoker {

		GLBaseMemoryAllocatorCreateFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~GLBaseMemoryAllocatorCreateFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal GLBaseMemoryAllocatorCreateFunctionInvoker (GLBaseMemoryAllocatorCreateFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal GLBaseMemoryAllocatorCreateFunctionInvoker (GLBaseMemoryAllocatorCreateFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal GLBaseMemoryAllocatorCreateFunctionInvoker (GLBaseMemoryAllocatorCreateFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.GL.GLBaseMemoryAllocatorCreateFunction Handler {
			get {
				return new Gst.GL.GLBaseMemoryAllocatorCreateFunction(InvokeNative);
			}
		}

		bool InvokeNative (Gst.GL.GLBaseMemory mem)
		{
			IntPtr native_mem = GLib.Marshaller.StructureToPtrAlloc (mem);
			IntPtr error = IntPtr.Zero;
			bool __result = native_cb (native_mem, out error);
			Marshal.FreeHGlobal (native_mem);
			return __result;
		}
	}

	internal class GLBaseMemoryAllocatorCreateFunctionWrapper {

		public bool NativeCallback (IntPtr mem, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				bool __ret = managed (Gst.GL.GLBaseMemory.New (mem));
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
				return false;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal GLBaseMemoryAllocatorCreateFunctionNative NativeDelegate;
		Gst.GL.GLBaseMemoryAllocatorCreateFunction managed;

		public GLBaseMemoryAllocatorCreateFunctionWrapper (Gst.GL.GLBaseMemoryAllocatorCreateFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new GLBaseMemoryAllocatorCreateFunctionNative (NativeCallback);
		}

		public static Gst.GL.GLBaseMemoryAllocatorCreateFunction GetManagedDelegate (GLBaseMemoryAllocatorCreateFunctionNative native)
		{
			if (native == null)
				return null;
			GLBaseMemoryAllocatorCreateFunctionWrapper wrapper = (GLBaseMemoryAllocatorCreateFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
