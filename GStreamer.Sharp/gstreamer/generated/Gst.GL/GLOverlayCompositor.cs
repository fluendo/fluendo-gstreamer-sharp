// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLOverlayCompositor : Gst.Object {

		public GLOverlayCompositor (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_overlay_compositor_new(IntPtr context);

		public GLOverlayCompositor (Gst.GL.GLContext context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLOverlayCompositor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_gl_overlay_compositor_new(context == null ? IntPtr.Zero : context.Handle);
		}

		[GLib.Property ("yinvert")]
		public bool Yinvert {
			get {
				GLib.Value val = GetProperty ("yinvert");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("yinvert", val);
				val.Dispose ();
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_padding"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_overlay_compositor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_overlay_compositor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_overlay_compositor_add_caps(IntPtr caps);

		public static Gst.Caps AddCaps (Gst.Caps caps)
		{
			IntPtr raw_ret = gst_gl_overlay_compositor_add_caps (caps == null ? IntPtr.Zero : caps.OwnedCopy);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps)GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_overlay_compositor_draw_overlays(IntPtr raw);

		public void DrawOverlays() {
			gst_gl_overlay_compositor_draw_overlays(Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_overlay_compositor_free_overlays(IntPtr raw);

		public void FreeOverlays() {
			gst_gl_overlay_compositor_free_overlays(Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_overlay_compositor_upload_overlays(IntPtr raw, IntPtr buf);

		public void UploadOverlays(Gst.Buffer buf) {
			gst_gl_overlay_compositor_upload_overlays(Handle, buf == null ? IntPtr.Zero : buf.Handle);
		}


		static GLOverlayCompositor ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("context"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, null
							, "last_window_width"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("last_window_width"
							, -1
							, (uint) Marshal.SizeOf(typeof(uint)) // last_window_width
							, "context"
							, "last_window_height"
							, (long) Marshal.OffsetOf(typeof(GstGLOverlayCompositor_last_window_widthAlign), "last_window_width")
							, 0
							),
						new GLib.AbiField("last_window_height"
							, -1
							, (uint) Marshal.SizeOf(typeof(uint)) // last_window_height
							, "last_window_width"
							, "overlays"
							, (long) Marshal.OffsetOf(typeof(GstGLOverlayCompositor_last_window_heightAlign), "last_window_height")
							, 0
							),
						new GLib.AbiField("overlays"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // overlays
							, "last_window_height"
							, "shader"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("shader"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // shader
							, "overlays"
							, "position_attrib"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("position_attrib"
							, -1
							, (uint) Marshal.SizeOf(typeof(int)) // position_attrib
							, "shader"
							, "texcoord_attrib"
							, (long) Marshal.OffsetOf(typeof(GstGLOverlayCompositor_position_attribAlign), "position_attrib")
							, 0
							),
						new GLib.AbiField("texcoord_attrib"
							, -1
							, (uint) Marshal.SizeOf(typeof(int)) // texcoord_attrib
							, "position_attrib"
							, "_padding"
							, (long) Marshal.OffsetOf(typeof(GstGLOverlayCompositor_texcoord_attribAlign), "texcoord_attrib")
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "texcoord_attrib"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLOverlayCompositor_last_window_widthAlign
		{
			sbyte f1;
			private uint last_window_width;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLOverlayCompositor_last_window_heightAlign
		{
			sbyte f1;
			private uint last_window_height;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLOverlayCompositor_position_attribAlign
		{
			sbyte f1;
			private int position_attrib;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLOverlayCompositor_texcoord_attribAlign
		{
			sbyte f1;
			private int texcoord_attrib;
		}


		// End of the ABI representation.

#endregion
	}
}
