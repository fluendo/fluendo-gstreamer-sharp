// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GLSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr GLAsyncDebugLogGetMessageNative(IntPtr user_data);

	internal class GLAsyncDebugLogGetMessageInvoker {

		GLAsyncDebugLogGetMessageNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~GLAsyncDebugLogGetMessageInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal GLAsyncDebugLogGetMessageInvoker (GLAsyncDebugLogGetMessageNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal GLAsyncDebugLogGetMessageInvoker (GLAsyncDebugLogGetMessageNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal GLAsyncDebugLogGetMessageInvoker (GLAsyncDebugLogGetMessageNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gst.GL.GLAsyncDebugLogGetMessage Handler {
			get {
				return new Gst.GL.GLAsyncDebugLogGetMessage(InvokeNative);
			}
		}

		string InvokeNative ()
		{
			string __result = GLib.Marshaller.PtrToStringGFree(native_cb (__data));
			return __result;
		}
	}

	internal class GLAsyncDebugLogGetMessageWrapper {

		public IntPtr NativeCallback (IntPtr user_data)
		{
			try {
				string __ret = managed ();
				if (release_on_call)
					gch.Free ();
				return GLib.Marshaller.StringToPtrGStrdup(__ret);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal GLAsyncDebugLogGetMessageNative NativeDelegate;
		Gst.GL.GLAsyncDebugLogGetMessage managed;

		public GLAsyncDebugLogGetMessageWrapper (Gst.GL.GLAsyncDebugLogGetMessage managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new GLAsyncDebugLogGetMessageNative (NativeCallback);
		}

		public static Gst.GL.GLAsyncDebugLogGetMessage GetManagedDelegate (GLAsyncDebugLogGetMessageNative native)
		{
			if (native == null)
				return null;
			GLAsyncDebugLogGetMessageWrapper wrapper = (GLAsyncDebugLogGetMessageWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
