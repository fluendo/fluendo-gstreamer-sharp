// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLDisplay : Gst.Object {

		public GLDisplay (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_display_new();

		public GLDisplay () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLDisplay)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gst_gl_display_new();
		}

		[GLib.Signal("create-context")]
		public event Gst.GL.CreateContextEventHandler CreateContextEvent {
			add {
				this.AddSignalHandler ("create-context", value, typeof (Gst.GL.CreateContextEventArgs));
			}
			remove {
				this.RemoveSignalHandler ("create-context", value);
			}
		}

		static CreateContextEventNativeDelegate CreateContextEvent_cb_delegate;
		static CreateContextEventNativeDelegate CreateContextEventVMCallback {
			get {
				if (CreateContextEvent_cb_delegate == null)
					CreateContextEvent_cb_delegate = new CreateContextEventNativeDelegate (CreateContextEvent_cb);
				return CreateContextEvent_cb_delegate;
			}
		}

		static void OverrideCreateContextEvent (GLib.GType gtype)
		{
			OverrideCreateContextEvent (gtype, CreateContextEventVMCallback);
		}

		static void OverrideCreateContextEvent (GLib.GType gtype, CreateContextEventNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "create-context", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CreateContextEventNativeDelegate (IntPtr inst, IntPtr context);

		static IntPtr CreateContextEvent_cb (IntPtr inst, IntPtr context)
		{
			try {
				GLDisplay __obj = GLib.Object.GetObject (inst, false) as GLDisplay;
				Gst.GL.GLContext __result;
				__result = __obj.OnCreateContextEvent (GLib.Object.GetObject(context) as Gst.GL.GLContext);
				return __result == null ? IntPtr.Zero : __result.OwnedHandle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.GL.GLDisplay), ConnectionMethod="OverrideCreateContextEvent")]
		protected virtual Gst.GL.GLContext OnCreateContextEvent (Gst.GL.GLContext context)
		{
			return InternalCreateContextEvent (context);
		}

		private Gst.GL.GLContext InternalCreateContextEvent (Gst.GL.GLContext context)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.Object);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (context);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			Gst.GL.GLContext result = (Gst.GL.GLContext) ret;
			ret.Dispose ();
			return result;
		}

		static GetHandleNativeDelegate GetHandle_cb_delegate;
		static GetHandleNativeDelegate GetHandleVMCallback {
			get {
				if (GetHandle_cb_delegate == null)
					GetHandle_cb_delegate = new GetHandleNativeDelegate (GetHandle_cb);
				return GetHandle_cb_delegate;
			}
		}

		static void OverrideGetHandle (GLib.GType gtype)
		{
			OverrideGetHandle (gtype, GetHandleVMCallback);
		}

		static void OverrideGetHandle (GLib.GType gtype, GetHandleNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_handle"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate UIntPtr GetHandleNativeDelegate (IntPtr inst);

		static UIntPtr GetHandle_cb (IntPtr inst)
		{
			try {
				GLDisplay __obj = GLib.Object.GetObject (inst, false) as GLDisplay;
				ulong __result;
				__result = __obj.OnGetHandle ();
				return new UIntPtr (__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.GL.GLDisplay), ConnectionMethod="OverrideGetHandle")]
		protected virtual ulong OnGetHandle ()
		{
			return InternalGetHandle ();
		}

		private ulong InternalGetHandle ()
		{
			GetHandleNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_handle"));
				unmanaged = (GetHandleNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetHandleNativeDelegate));
			}
			if (unmanaged == null) return 0;

			UIntPtr __result = unmanaged (this.Handle);
			return (ulong) __result;
		}

		static CreateWindowNativeDelegate CreateWindow_cb_delegate;
		static CreateWindowNativeDelegate CreateWindowVMCallback {
			get {
				if (CreateWindow_cb_delegate == null)
					CreateWindow_cb_delegate = new CreateWindowNativeDelegate (CreateWindow_cb);
				return CreateWindow_cb_delegate;
			}
		}

		static void OverrideCreateWindow (GLib.GType gtype)
		{
			OverrideCreateWindow (gtype, CreateWindowVMCallback);
		}

		static void OverrideCreateWindow (GLib.GType gtype, CreateWindowNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("create_window"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CreateWindowNativeDelegate (IntPtr inst);

		static IntPtr CreateWindow_cb (IntPtr inst)
		{
			try {
				GLDisplay __obj = GLib.Object.GetObject (inst, false) as GLDisplay;
				Gst.GL.GLWindow __result;
				__result = __obj.OnCreateWindow ();
				return __result == null ? IntPtr.Zero : __result.OwnedHandle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.GL.GLDisplay), ConnectionMethod="OverrideCreateWindow")]
		protected virtual Gst.GL.GLWindow OnCreateWindow ()
		{
			return InternalCreateWindow ();
		}

		private Gst.GL.GLWindow InternalCreateWindow ()
		{
			CreateWindowNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("create_window"));
				unmanaged = (CreateWindowNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(CreateWindowNativeDelegate));
			}
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result, true) as Gst.GL.GLWindow;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("get_handle"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_handle
							, null
							, "create_window"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("create_window"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // create_window
							, "get_handle"
							, "_padding"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "create_window"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_display_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_display_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_display_add_context(IntPtr raw, IntPtr context);

		public bool AddContext(Gst.GL.GLContext context) {
			bool raw_ret = gst_gl_display_add_context(Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gst_gl_display_create_context(IntPtr raw, IntPtr other_context, out IntPtr p_context, out IntPtr error);

		public unsafe bool CreateContext(Gst.GL.GLContext other_context, out Gst.GL.GLContext p_context) {
			IntPtr native_p_context;
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gst_gl_display_create_context(Handle, other_context == null ? IntPtr.Zero : other_context.Handle, out native_p_context, out error);
			bool ret = raw_ret;
			p_context = GLib.Object.GetObject(native_p_context, true) as Gst.GL.GLContext;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_display_create_window(IntPtr raw);

		public Gst.GL.GLWindow CreateWindow() {
			IntPtr raw_ret = gst_gl_display_create_window(Handle);
			Gst.GL.GLWindow ret = GLib.Object.GetObject(raw_ret, true) as Gst.GL.GLWindow;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_display_filter_gl_api(IntPtr raw, int gl_api);

		public void FilterGlApi(Gst.GL.GLAPI gl_api) {
			gst_gl_display_filter_gl_api(Handle, (int) gl_api);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_display_get_gl_api(IntPtr raw);

		public Gst.GL.GLAPI GlApi { 
			get {
				int raw_ret = gst_gl_display_get_gl_api(Handle);
				Gst.GL.GLAPI ret = (Gst.GL.GLAPI) raw_ret;
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_display_get_gl_api_unlocked(IntPtr raw);

		public Gst.GL.GLAPI GlApiUnlocked { 
			get {
				int raw_ret = gst_gl_display_get_gl_api_unlocked(Handle);
				Gst.GL.GLAPI ret = (Gst.GL.GLAPI) raw_ret;
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_display_get_gl_context_for_thread(IntPtr raw, out GLib.Thread thread);

		public Gst.GL.GLContext GetGlContextForThread(out GLib.Thread thread) {
			IntPtr raw_ret = gst_gl_display_get_gl_context_for_thread(Handle, out thread);
			Gst.GL.GLContext ret = GLib.Object.GetObject(raw_ret, true) as Gst.GL.GLContext;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gst_gl_display_get_handle(IntPtr raw);

		public ulong GetHandle() {
			UIntPtr raw_ret = gst_gl_display_get_handle(Handle);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_display_get_handle_type(IntPtr raw);

		public Gst.GL.GLDisplayType HandleType { 
			get {
				int raw_ret = gst_gl_display_get_handle_type(Handle);
				Gst.GL.GLDisplayType ret = (Gst.GL.GLDisplayType) raw_ret;
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_display_remove_context(IntPtr raw, IntPtr context);

		public void RemoveContext(Gst.GL.GLContext context) {
			gst_gl_display_remove_context(Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_display_remove_window(IntPtr raw, IntPtr window);

		public bool RemoveWindow(Gst.GL.GLWindow window) {
			bool raw_ret = gst_gl_display_remove_window(Handle, window == null ? IntPtr.Zero : window.Handle);
			bool ret = raw_ret;
			return ret;
		}


		static GLDisplay ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("type"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.GL.GLDisplayType))) // type
							, null
							, "windows"
							, (long) Marshal.OffsetOf(typeof(GstGLDisplay_typeAlign), "type")
							, 0
							),
						new GLib.AbiField("windows"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // windows
							, "type"
							, "main_context"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("main_context"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // main_context
							, "windows"
							, "main_loop"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("main_loop"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // main_loop
							, "main_context"
							, "event_source"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("event_source"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // event_source
							, "main_loop"
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "event_source"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLDisplay_typeAlign
		{
			sbyte f1;
			private Gst.GL.GLDisplayType type;
		}


		// End of the ABI representation.

#endregion
	}
}
