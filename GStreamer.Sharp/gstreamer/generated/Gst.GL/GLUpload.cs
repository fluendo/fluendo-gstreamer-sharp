// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLUpload : Gst.Object {

		public GLUpload (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_upload_new(IntPtr context);

		public GLUpload (Gst.GL.GLContext context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLUpload)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_gl_upload_new(context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_upload_set_context(IntPtr raw, IntPtr context);

		public Gst.GL.GLContext Context {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("context"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.GL.GLContext;
				}
			}
			set  {
				gst_gl_upload_set_context(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_padding"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_upload_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_upload_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_upload_get_input_template_caps();

		public static Gst.Caps InputTemplateCaps { 
			get {
				IntPtr raw_ret = gst_gl_upload_get_input_template_caps();
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_upload_get_caps(IntPtr raw, out IntPtr in_caps, out IntPtr out_caps);

		public void GetCaps(out Gst.Caps in_caps, out Gst.Caps out_caps) {
			IntPtr native_in_caps;
			IntPtr native_out_caps;
			gst_gl_upload_get_caps(Handle, out native_in_caps, out native_out_caps);
			in_caps = native_in_caps == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (native_in_caps, typeof (Gst.Caps), true);
			out_caps = native_out_caps == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (native_out_caps, typeof (Gst.Caps), true);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_gl_upload_perform_with_buffer(IntPtr raw, IntPtr buffer, out IntPtr outbuf_ptr);

		public Gst.GL.GLUploadReturn PerformWithBuffer(Gst.Buffer buffer, out Gst.Buffer outbuf_ptr) {
			IntPtr native_outbuf_ptr;
			int raw_ret = gst_gl_upload_perform_with_buffer(Handle, buffer == null ? IntPtr.Zero : buffer.Handle, out native_outbuf_ptr);
			Gst.GL.GLUploadReturn ret = (Gst.GL.GLUploadReturn) raw_ret;
			outbuf_ptr = native_outbuf_ptr == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (native_outbuf_ptr, typeof (Gst.Buffer), true);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_upload_propose_allocation(IntPtr raw, IntPtr decide_query, IntPtr query);

		public void ProposeAllocation(Gst.Query decide_query, Gst.Query query) {
			gst_gl_upload_propose_allocation(Handle, decide_query == null ? IntPtr.Zero : decide_query.Handle, query == null ? IntPtr.Zero : query.Handle);
		}

		public void ProposeAllocation(Gst.Query query) {
			ProposeAllocation (null, query);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_upload_set_caps(IntPtr raw, IntPtr in_caps, IntPtr out_caps);

		public bool SetCaps(Gst.Caps in_caps, Gst.Caps out_caps) {
			bool raw_ret = gst_gl_upload_set_caps(Handle, in_caps == null ? IntPtr.Zero : in_caps.Handle, out_caps == null ? IntPtr.Zero : out_caps.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_upload_transform_caps(IntPtr raw, IntPtr context, int direction, IntPtr caps, IntPtr filter);

		public Gst.Caps TransformCaps(Gst.GL.GLContext context, Gst.PadDirection direction, Gst.Caps caps, Gst.Caps filter) {
			IntPtr raw_ret = gst_gl_upload_transform_caps(Handle, context == null ? IntPtr.Zero : context.Handle, (int) direction, caps == null ? IntPtr.Zero : caps.Handle, filter == null ? IntPtr.Zero : filter.Handle);
			Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), true);
			return ret;
		}


		static GLUpload ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("context"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, null
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "context"
							, "_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
