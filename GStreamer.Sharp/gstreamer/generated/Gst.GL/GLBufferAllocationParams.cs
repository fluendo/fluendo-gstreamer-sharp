// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GLBufferAllocationParams : IEquatable<GLBufferAllocationParams> {

		public Gst.GL.GLAllocationParams Parent;
		public uint GlTarget;
		public uint GlUsage;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		private IntPtr[] _Padding;

		public static Gst.GL.GLBufferAllocationParams Zero = new Gst.GL.GLBufferAllocationParams ();

		public static Gst.GL.GLBufferAllocationParams New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.GL.GLBufferAllocationParams.Zero;
			return (Gst.GL.GLBufferAllocationParams) Marshal.PtrToStructure (raw, typeof (Gst.GL.GLBufferAllocationParams));
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_buffer_allocation_params_new(IntPtr context, UIntPtr alloc_size, IntPtr alloc_params, uint gl_target, uint gl_usage);

		public static GLBufferAllocationParams New(Gst.GL.GLContext context, ulong alloc_size, Gst.AllocationParams alloc_params, uint gl_target, uint gl_usage)
		{
			IntPtr native_alloc_params = GLib.Marshaller.StructureToPtrAlloc (alloc_params);
			GLBufferAllocationParams result = GLBufferAllocationParams.New (gst_gl_buffer_allocation_params_new(context == null ? IntPtr.Zero : context.Handle, new UIntPtr (alloc_size), native_alloc_params, gl_target, gl_usage));
			Marshal.FreeHGlobal (native_alloc_params);
			return result;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_buffer_allocation_params_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_buffer_allocation_params_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (GLBufferAllocationParams other)
		{
			return true && Parent.Equals (other.Parent) && GlTarget.Equals (other.GlTarget) && GlUsage.Equals (other.GlUsage);
		}

		public override bool Equals (object other)
		{
			return other is GLBufferAllocationParams && Equals ((GLBufferAllocationParams) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Parent.GetHashCode () ^ GlTarget.GetHashCode () ^ GlUsage.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gst.GL.GLBufferAllocationParams boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gst.GL.GLBufferAllocationParams.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gst.GL.GLBufferAllocationParams (GLib.Value val)
		{
			return (Gst.GL.GLBufferAllocationParams) val.Val;
		}
#endregion
	}
}
