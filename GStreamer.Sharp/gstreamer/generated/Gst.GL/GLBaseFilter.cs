// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLBaseFilter : Gst.Base.BaseTransform {

		public GLBaseFilter (IntPtr raw) : base(raw) {}

		protected GLBaseFilter() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("context")]
		public Gst.GL.GLContext Context {
			get {
				GLib.Value val = GetProperty ("context");
				Gst.GL.GLContext ret = (Gst.GL.GLContext) val;
				val.Dispose ();
				return ret;
			}
		}

		public Gst.GL.GLDisplay Display {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("display"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.GL.GLDisplay;
				}
			}
		}

		public Gst.GL.GLContext ContextField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("context"));
					return GLib.Object.GetObject((*raw_ptr)) as Gst.GL.GLContext;
				}
			}
		}

		public Gst.Caps InCaps {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("in_caps"));
					return (*raw_ptr) == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gst.Caps), false);
				}
			}
		}

		public Gst.Caps OutCaps {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("out_caps"));
					return (*raw_ptr) == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque ((*raw_ptr), typeof (Gst.Caps), false);
				}
			}
		}

		static GlStartNativeDelegate GlStart_cb_delegate;
		static GlStartNativeDelegate GlStartVMCallback {
			get {
				if (GlStart_cb_delegate == null)
					GlStart_cb_delegate = new GlStartNativeDelegate (GlStart_cb);
				return GlStart_cb_delegate;
			}
		}

		static void OverrideGlStart (GLib.GType gtype)
		{
			OverrideGlStart (gtype, GlStartVMCallback);
		}

		static void OverrideGlStart (GLib.GType gtype, GlStartNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("gl_start"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GlStartNativeDelegate (IntPtr inst);

		static bool GlStart_cb (IntPtr inst)
		{
			try {
				GLBaseFilter __obj = GLib.Object.GetObject (inst, false) as GLBaseFilter;
				bool __result;
				__result = __obj.OnGlStart ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.GL.GLBaseFilter), ConnectionMethod="OverrideGlStart")]
		protected virtual bool OnGlStart ()
		{
			return InternalGlStart ();
		}

		private bool InternalGlStart ()
		{
			GlStartNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("gl_start"));
				unmanaged = (GlStartNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GlStartNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static GlStopNativeDelegate GlStop_cb_delegate;
		static GlStopNativeDelegate GlStopVMCallback {
			get {
				if (GlStop_cb_delegate == null)
					GlStop_cb_delegate = new GlStopNativeDelegate (GlStop_cb);
				return GlStop_cb_delegate;
			}
		}

		static void OverrideGlStop (GLib.GType gtype)
		{
			OverrideGlStop (gtype, GlStopVMCallback);
		}

		static void OverrideGlStop (GLib.GType gtype, GlStopNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("gl_stop"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GlStopNativeDelegate (IntPtr inst);

		static void GlStop_cb (IntPtr inst)
		{
			try {
				GLBaseFilter __obj = GLib.Object.GetObject (inst, false) as GLBaseFilter;
				__obj.OnGlStop ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.GL.GLBaseFilter), ConnectionMethod="OverrideGlStop")]
		protected virtual void OnGlStop ()
		{
			InternalGlStop ();
		}

		private void InternalGlStop ()
		{
			GlStopNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("gl_stop"));
				unmanaged = (GlStopNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GlStopNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static GlSetCapsNativeDelegate GlSetCaps_cb_delegate;
		static GlSetCapsNativeDelegate GlSetCapsVMCallback {
			get {
				if (GlSetCaps_cb_delegate == null)
					GlSetCaps_cb_delegate = new GlSetCapsNativeDelegate (GlSetCaps_cb);
				return GlSetCaps_cb_delegate;
			}
		}

		static void OverrideGlSetCaps (GLib.GType gtype)
		{
			OverrideGlSetCaps (gtype, GlSetCapsVMCallback);
		}

		static void OverrideGlSetCaps (GLib.GType gtype, GlSetCapsNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("gl_set_caps"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GlSetCapsNativeDelegate (IntPtr inst, IntPtr incaps, IntPtr outcaps);

		static bool GlSetCaps_cb (IntPtr inst, IntPtr incaps, IntPtr outcaps)
		{
			try {
				GLBaseFilter __obj = GLib.Object.GetObject (inst, false) as GLBaseFilter;
				bool __result;
				__result = __obj.OnGlSetCaps (incaps == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (incaps, typeof (Gst.Caps), false), outcaps == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (outcaps, typeof (Gst.Caps), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gst.GL.GLBaseFilter), ConnectionMethod="OverrideGlSetCaps")]
		protected virtual bool OnGlSetCaps (Gst.Caps incaps, Gst.Caps outcaps)
		{
			return InternalGlSetCaps (incaps, outcaps);
		}

		private bool InternalGlSetCaps (Gst.Caps incaps, Gst.Caps outcaps)
		{
			GlSetCapsNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("gl_set_caps"));
				unmanaged = (GlSetCapsNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GlSetCapsNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, incaps == null ? IntPtr.Zero : incaps.Handle, outcaps == null ? IntPtr.Zero : outcaps.Handle);
			return __result;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("supported_gl_api"
							, Gst.Base.BaseTransform.class_abi.Fields
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Gst.GL.GLAPI))) // supported_gl_api
							, null
							, "gl_start"
							, (long) Marshal.OffsetOf(typeof(GstGLBaseFilter_supported_gl_apiAlign), "supported_gl_api")
							, 0
							),
						new GLib.AbiField("gl_start"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // gl_start
							, "supported_gl_api"
							, "gl_stop"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("gl_stop"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // gl_stop
							, "gl_start"
							, "gl_set_caps"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("gl_set_caps"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // gl_set_caps
							, "gl_stop"
							, "_padding"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "gl_set_caps"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLBaseFilter_supported_gl_apiAlign
		{
			sbyte f1;
			private Gst.GL.GLAPI supported_gl_api;
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_base_filter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_base_filter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_base_filter_find_gl_context(IntPtr raw);

		public bool FindGlContext() {
			bool raw_ret = gst_gl_base_filter_find_gl_context(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_base_filter_get_gl_context(IntPtr raw);

		public Gst.GL.GLContext GlContext { 
			get {
				IntPtr raw_ret = gst_gl_base_filter_get_gl_context(Handle);
				Gst.GL.GLContext ret = GLib.Object.GetObject(raw_ret, true) as Gst.GL.GLContext;
				return ret;
			}
		}


		static GLBaseFilter ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("display"
							, Gst.Base.BaseTransform.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // display
							, null
							, "context"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("context"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, "display"
							, "in_caps"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("in_caps"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // in_caps
							, "context"
							, "out_caps"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("out_caps"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // out_caps
							, "in_caps"
							, "_padding"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "out_caps"
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "_padding"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
