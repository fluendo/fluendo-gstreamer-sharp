// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.GL {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class GLFramebuffer : Gst.Object {

		public GLFramebuffer (IntPtr raw) : base(raw) {}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_framebuffer_new(IntPtr context);

		public GLFramebuffer (Gst.GL.GLContext context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLFramebuffer)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_gl_framebuffer_new(context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_framebuffer_new_with_default_depth(IntPtr context, uint width, uint height);

		public GLFramebuffer (Gst.GL.GLContext context, uint width, uint height) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GLFramebuffer)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gst_gl_framebuffer_new_with_default_depth(context == null ? IntPtr.Zero : context.Handle, width, height);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_padding"
							, Gst.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_gl_framebuffer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_gl_framebuffer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_framebuffer_attach(IntPtr raw, uint attachment_point, IntPtr mem);

		public void Attach(uint attachment_point, Gst.GL.GLBaseMemory mem) {
			IntPtr native_mem = GLib.Marshaller.StructureToPtrAlloc (mem);
			gst_gl_framebuffer_attach(Handle, attachment_point, native_mem);
			Marshal.FreeHGlobal (native_mem);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_framebuffer_bind(IntPtr raw);

		public void Bind() {
			gst_gl_framebuffer_bind(Handle);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_gl_framebuffer_draw_to_texture(IntPtr raw, IntPtr mem, Gst.GLSharp.GLFramebufferFuncNative func, IntPtr user_data);

		public bool DrawToTexture(Gst.GL.GLMemory mem, Gst.GL.GLFramebufferFunc func) {
			IntPtr native_mem = GLib.Marshaller.StructureToPtrAlloc (mem);
			Gst.GLSharp.GLFramebufferFuncWrapper func_wrapper = new Gst.GLSharp.GLFramebufferFuncWrapper (func);
			bool raw_ret = gst_gl_framebuffer_draw_to_texture(Handle, native_mem, func_wrapper.NativeDelegate, IntPtr.Zero);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_mem);
			return ret;
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_gl_framebuffer_get_effective_dimensions(IntPtr raw, out uint width, out uint height);

		public void GetEffectiveDimensions(out uint width, out uint height) {
			gst_gl_framebuffer_get_effective_dimensions(Handle, out width, out height);
		}

		[DllImport("gstgl-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gst_gl_framebuffer_get_id(IntPtr raw);

		public uint Id { 
			get {
				uint raw_ret = gst_gl_framebuffer_get_id(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}


		static GLFramebuffer ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("context"
							, Gst.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // context
							, null
							, "fbo_id"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("fbo_id"
							, -1
							, (uint) Marshal.SizeOf(typeof(uint)) // fbo_id
							, "context"
							, "attachments"
							, (long) Marshal.OffsetOf(typeof(GstGLFramebuffer_fbo_idAlign), "fbo_id")
							, 0
							),
						new GLib.AbiField("attachments"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // attachments
							, "fbo_id"
							, "_padding"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_padding"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _padding
							, "attachments"
							, "priv"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("priv"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "_padding"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstGLFramebuffer_fbo_idAlign
		{
			sbyte f1;
			private uint fbo_id;
		}


		// End of the ABI representation.

#endregion
	}
}
